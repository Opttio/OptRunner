using System.Collections;
using _OprRunner.Scripts.Core.ConditionsActionsExecutors;
using UnityEngine;

namespace _OprRunner.Scripts.Character
{
    public class InvulnerabilityAction : IAction
    {
        private Transform _character;
        private float _invulnerabilityDuration;
        private Coroutine _invulnerabilityRoutine = null;
        private MonoBehaviour _monoBehaviour;
        private OneShotCondition _oneShotCondition;
        private readonly System.Action<bool> _setInvulnerable;
        private IsInvulnerabilityCondition _isInvulnerabilityCondition;

        public InvulnerabilityAction(Transform character, float invulnerabilityDuration, MonoBehaviour monoBehaviour, OneShotCondition oneShotCondition, System.Action<bool> setInvulnerable, IsInvulnerabilityCondition isInvulnerabilityCondition)
        {
            _character = character;
            _invulnerabilityDuration = invulnerabilityDuration;
            _monoBehaviour = monoBehaviour;
            _oneShotCondition = oneShotCondition;
            _setInvulnerable = setInvulnerable;
            _isInvulnerabilityCondition =  isInvulnerabilityCondition;
        }

        private void StartInvulnerability()
        {
            if (_invulnerabilityRoutine != null)
                _monoBehaviour.StopCoroutine(_invulnerabilityRoutine);
            _invulnerabilityRoutine = _monoBehaviour.StartCoroutine(Blinking());
        }

        private IEnumerator Blinking()
        {
            Debug.Log("[Invulnerability] Start Blinking");
            var mr = _character.GetComponentInChildren<SkinnedMeshRenderer>();
            Debug.Log("[Invulnerability] SetInvulnerable(true)");
            _setInvulnerable(true);
            float elapsed = 0f;
            while (elapsed < _invulnerabilityDuration)
            {
                elapsed += Time.deltaTime;
                mr.enabled = !mr.enabled;
                yield return new WaitForSeconds(0.01f);
            }
            mr.enabled = true;
            Debug.Log("[Invulnerability] SetInvulnerable(false)");
            _setInvulnerable(false);
            Debug.Log("[Invulnerability] SetInvisible(false)");
            _isInvulnerabilityCondition.SetInvisible(false);
            _oneShotCondition.Reset();
            Debug.Log("[Invulnerability] Finished Blinking");
            _invulnerabilityRoutine = null;
        }

        public void Execute()
        {
            StartInvulnerability();
        }
    }
}